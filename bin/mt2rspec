#!/usr/bin/env ruby

require 'minitest_to_rspec'

module MinitestToRspec
  class CLI
    E_USAGE = 1
    E_FILE_NOT_FOUND = 2
    E_FILE_ALREADY_EXISTS = 3
    E_CONVERT_FAIL = 4

    USAGE = <<EOS
Usage: mt2rspec --rails source_file target_file

Reads source_file, writes target_file.

--rails    Require rails_helper instead of spec_helper.
           Pass :type metadatum to RSpec.describe.

EOS

    def initialize(args)
      check_usage(args)
      @target = args.pop
      @source = args.pop
      @rails = false
      parse_options(args)
    end

    def run
      assert_file_exists(@source)
      assert_file_does_not_exist(@target)
      write_target(converter.convert(read_source))
    rescue Error => e
      $stderr.puts "Failed to convert: #{e}"
      exit E_CONVERT_FAIL
    end

    private

    def assert_file_exists(file)
      unless File.exist?(file)
        $stderr.puts "File not found: #{file}"
        exit(E_FILE_NOT_FOUND)
      end
    end

    def assert_file_does_not_exist(file)
      if File.exist?(file)
        $stderr.puts "File already exists: #{file}"
        exit(E_FILE_ALREADY_EXISTS)
      end
    end

    def check_usage(args)
      unless (2..3).cover?(args.length)
        print_usage
        exit(E_USAGE)
      end
    end

    def converter
      Converter.new(rails: @rails)
    end

    def parse_options(args)
      raise ArgumentError unless args.length <= 1
      args.each do |arg|
        case arg
        when "--rails"
          @rails = true
        else
          raise ArgumentError, "Unexpected option: #{arg}"
        end
      end
    end

    def print_usage
      $stderr.puts USAGE
    end

    def read_source
      File.read(@source)
    end

    def write_target(str)
      File.write(@target, str)
    end
  end
end

MinitestToRspec::CLI.new(ARGV).run
